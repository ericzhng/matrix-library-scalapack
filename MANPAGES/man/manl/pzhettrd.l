.TH PZHETTRD l "13 August 2001" "ScaLAPACK version 1.7" ")"
.SH NAME

.SH SYNOPSIS
.TP 21
SUBROUTINE PZHETTRD(
UPLO, N, A, IA, JA, DESCA, D, E, TAU, WORK,
LWORK, INFO )
.TP 21
.ti +4
CHARACTER
UPLO
.TP 21
.ti +4
INTEGER
IA, INFO, JA, LWORK, N
.TP 21
.ti +4
INTEGER
DESCA( * )
.TP 21
.ti +4
DOUBLE
PRECISION D( * ), E( * )
.TP 21
.ti +4
COMPLEX*16
A( * ), TAU( * ), WORK( * )
.TP 21
.ti +4
INTEGER
BLOCK_CYCLIC_2D, DLEN_, DTYPE_, CTXT_, M_, N_,
MB_, NB_, RSRC_, CSRC_, LLD_
.TP 21
.ti +4
PARAMETER
( BLOCK_CYCLIC_2D = 1, DLEN_ = 9, DTYPE_ = 1,
CTXT_ = 2, M_ = 3, N_ = 4, MB_ = 5, NB_ = 6,
RSRC_ = 7, CSRC_ = 8, LLD_ = 9 )
.TP 21
.ti +4
DOUBLE
PRECISION ONE
.TP 21
.ti +4
PARAMETER
( ONE = 1.0D0 )
.TP 21
.ti +4
COMPLEX*16
Z_ONE, Z_NEGONE, Z_ZERO
.TP 21
.ti +4
PARAMETER
( Z_ONE = 1.0D0, Z_NEGONE = -1.0D0,
Z_ZERO = 0.0D0 )
.TP 21
.ti +4
DOUBLE
PRECISION ZERO
.TP 21
.ti +4
PARAMETER
( ZERO = 0.0D+0 )
.TP 21
.ti +4
LOGICAL
BALANCED, INTERLEAVE, TWOGEMMS, UPPER
.TP 21
.ti +4
INTEGER
ANB, BINDEX, CURCOL, CURROW, I, ICTXT, INDEX,
INDEXA, INDEXINH, INDEXINV, INH, INHB, INHT,
INHTB, INTMP, INV, INVB, INVT, INVTB, J, LDA,
LDV, LDZG, LII, LIIB, LIIP1, LIJ, LIJB, LIJP1,
LTLIP1, LTNM1, LWMIN, MAXINDEX, MININDEX,
MYCOL, MYFIRSTROW, MYROW, MYSETNUM, NBZG, NP,
NPB, NPCOL, NPM0, NPM1, NPROW, NPS, NPSET, NQ,
NQB, NQM1, NUMROWS, NXTCOL, NXTROW, PBMAX,
PBMIN, PBSIZE, PNB, ROWSPERPROC
.TP 21
.ti +4
DOUBLE
PRECISION NORM, SAFMAX, SAFMIN
.TP 21
.ti +4
COMPLEX*16
ALPHA, BETA, C, CONJTOPH, CONJTOPV,
ONEOVERBETA, TOPH, TOPNV, TOPTAU, TOPV
.TP 21
.ti +4
INTEGER
IDUM1( 1 ), IDUM2( 1 )
.TP 21
.ti +4
DOUBLE
PRECISION DTMP( 5 )
.TP 21
.ti +4
COMPLEX*16
CC( 3 )
.TP 21
.ti +4
EXTERNAL
BLACS_GRIDINFO, CHK1MAT, DCOMBNRM2, DGEBR2D,
DGEBS2D, DGSUM2D, PCHK1MAT, PDTREECOMB,
PXERBLA, ZGEBR2D, ZGEBS2D, ZGEMM, ZGEMV,
ZGERV2D, ZGESD2D, ZGSUM2D, ZLACPY, ZSCAL,
ZTRMVT
.TP 21
.ti +4
LOGICAL
LSAME
.TP 21
.ti +4
INTEGER
ICEIL, NUMROC, PJLAENV
.TP 21
.ti +4
DOUBLE
PRECISION DZNRM2, PDLAMCH
.TP 21
.ti +4
EXTERNAL
LSAME, ICEIL, NUMROC, PJLAENV, DZNRM2, PDLAMCH
.TP 21
.ti +4
INTRINSIC
DBLE, DCMPLX, DCONJG, DIMAG, ICHAR, MAX, MIN,
MOD, SIGN, SQRT
.TP 21
.ti +4
IF(
BLOCK_CYCLIC_2D*CSRC_*CTXT_*DLEN_*DTYPE_*LLD_*MB_*M_*NB_*N_*
RSRC_.LT.0 )RETURN
.TP 21
.ti +4
ICTXT
= DESCA( CTXT_ )
.TP 21
.ti +4
CALL
BLACS_GRIDINFO( ICTXT, NPROW, NPCOL, MYROW, MYCOL )
.TP 21
.ti +4
SAFMAX
= SQRT( PDLAMCH( ICTXT, 'O' ) ) / N
.TP 21
.ti +4
SAFMIN
= SQRT( PDLAMCH( ICTXT, 'S' ) )
.TP 21
.ti +4
INFO
= 0
.TP 21
.ti +4
IF(
NPROW.EQ.-1 ) THEN
.TP 21
.ti +4
INFO
= -( 600+CTXT_ )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
PNB
= PJLAENV( ICTXT, 2, 'PZHETTRD', 'L', 0, 0, 0, 0 )
.TP 21
.ti +4
ANB
= PJLAENV( ICTXT, 3, 'PZHETTRD', 'L', 0, 0, 0, 0 )
.TP 21
.ti +4
INTERLEAVE
= ( PJLAENV( ICTXT, 4, 'PZHETTRD', 'L', 1, 0, 0,
0 ).EQ.1 )
.TP 21
.ti +4
TWOGEMMS
= ( PJLAENV( ICTXT, 4, 'PZHETTRD', 'L', 2, 0, 0,
0 ).EQ.1 )
.TP 21
.ti +4
BALANCED
= ( PJLAENV( ICTXT, 4, 'PZHETTRD', 'L', 3, 0, 0,
0 ).EQ.1 )
.TP 21
.ti +4
CALL
CHK1MAT( N, 2, N, 2, IA, JA, DESCA, 6, INFO )
.TP 21
.ti +4
UPPER
= LSAME( UPLO, 'U' )
.TP 21
.ti +4
IF(
INFO.EQ.0 .AND. DESCA( NB_ ).NE.1 )
INFO = 600 + NB_
.TP 21
.ti +4
IF(
INFO.EQ.0 ) THEN
.TP 21
.ti +4
NPS
= MAX( NUMROC( N, 1, 0, 0, NPROW ), 2*ANB )
.TP 21
.ti +4
LWMIN
= 2*( ANB+1 )*( 4*NPS+2 ) + NPS
.TP 21
.ti +4
WORK(
1 ) = DCMPLX( LWMIN )
.TP 21
.ti +4
IF(
.NOT.LSAME( UPLO, 'L' ) ) THEN
.TP 21
.ti +4
INFO
= -1
.TP 21
.ti +4
ELSE
IF( IA.NE.1 ) THEN
.TP 21
.ti +4
INFO
= -4
.TP 21
.ti +4
ELSE
IF( JA.NE.1 ) THEN
.TP 21
.ti +4
INFO
= -5
.TP 21
.ti +4
ELSE
IF( NPROW.NE.NPCOL ) THEN
.TP 21
.ti +4
INFO
= -( 600+CTXT_ )
.TP 21
.ti +4
ELSE
IF( DESCA( DTYPE_ ).NE.1 ) THEN
.TP 21
.ti +4
INFO
= -( 600+DTYPE_ )
.TP 21
.ti +4
ELSE
IF( DESCA( MB_ ).NE.1 ) THEN
.TP 21
.ti +4
INFO
= -( 600+MB_ )
.TP 21
.ti +4
ELSE
IF( DESCA( NB_ ).NE.1 ) THEN
.TP 21
.ti +4
INFO
= -( 600+NB_ )
.TP 21
.ti +4
ELSE
IF( DESCA( RSRC_ ).NE.0 ) THEN
.TP 21
.ti +4
INFO
= -( 600+RSRC_ )
.TP 21
.ti +4
ELSE
IF( DESCA( CSRC_ ).NE.0 ) THEN
.TP 21
.ti +4
INFO
= -( 600+CSRC_ )
.TP 21
.ti +4
ELSE
IF( LWORK.LT.LWMIN ) THEN
.TP 21
.ti +4
INFO
= -11
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
UPPER ) THEN
.TP 21
.ti +4
IDUM1(
1 ) = ICHAR( 'U' )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
IDUM1(
1 ) = ICHAR( 'L' )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IDUM2(
1 ) = 1
.TP 21
.ti +4
CALL
PCHK1MAT( N, 2, N, 2, IA, JA, DESCA, 6, 1, IDUM1, IDUM2,
INFO )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
INFO.NE.0 ) THEN
.TP 21
.ti +4
CALL
PXERBLA( ICTXT, 'PZHETTRD', -INFO )
.TP 21
.ti +4
RETURN
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
N.EQ.0 )
RETURN
.TP 21
.ti +4
NP
= NUMROC( N, 1, MYROW, 0, NPROW )
.TP 21
.ti +4
NQ
= NUMROC( N, 1, MYCOL, 0, NPCOL )
.TP 21
.ti +4
NXTROW
= 0
.TP 21
.ti +4
NXTCOL
= 0
.TP 21
.ti +4
LIIP1
= 1
.TP 21
.ti +4
LIJP1
= 1
.TP 21
.ti +4
NPM1
= NP
.TP 21
.ti +4
NQM1
= NQ
.TP 21
.ti +4
LDA
= DESCA( LLD_ )
.TP 21
.ti +4
ICTXT
= DESCA( CTXT_ )
.TP 21
.ti +4
INH
= 1
.TP 21
.ti +4
IF(
INTERLEAVE ) THEN
.TP 21
.ti +4
LDV
= 4*( MAX( NPM1, NQM1 ) ) + 2
.TP 21
.ti +4
INH
= 1
.TP 21
.ti +4
INV
= INH + LDV / 2
.TP 21
.ti +4
INVT
= INH + ( ANB+1 )*LDV
.TP 21
.ti +4
INHT
= INVT + LDV / 2
.TP 21
.ti +4
INTMP
= INVT + LDV*( ANB+1 )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
LDV
= MAX( NPM1, NQM1 )
.TP 21
.ti +4
INHT
= INH + LDV*( ANB+1 )
.TP 21
.ti +4
INV
= INHT + LDV*( ANB+1 )
.TP 21
.ti +4
INVT
= INV + LDV*( ANB+1 ) + 1
.TP 21
.ti +4
INTMP
= INVT + LDV*( 2*ANB )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
INFO.NE.0 ) THEN
.TP 21
.ti +4
CALL
PXERBLA( ICTXT, 'PZHETTRD', -INFO )
.TP 21
.ti +4
WORK(
1 ) = DCMPLX( LWMIN )
.TP 21
.ti +4
RETURN
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
10 I = 1, NP
.TP 21
.ti +4
WORK(
INH+I-1 ) = Z_ZERO
.TP 21
.ti +4
WORK(
INV+I-1 ) = Z_ZERO
.TP 21
.ti +4
10
CONTINUE
.TP 21
.ti +4
DO
20 I = 1, NQ
.TP 21
.ti +4
WORK(
INHT+I-1 ) = Z_ZERO
.TP 21
.ti +4
20
CONTINUE
.TP 21
.ti +4
TOPNV
= Z_ZERO
.TP 21
.ti +4
LTLIP1
= LIJP1
.TP 21
.ti +4
LTNM1
= NPM1
.TP 21
.ti +4
IF(
MYCOL.GT.MYROW ) THEN
.TP 21
.ti +4
LTLIP1
= LTLIP1 + 1
.TP 21
.ti +4
LTNM1
= LTNM1 - 1
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
210 MININDEX = 1, N - 1, ANB
.TP 21
.ti +4
MAXINDEX
= MIN( MININDEX+ANB-1, N )
.TP 21
.ti +4
LIJB
= NUMROC( MAXINDEX, 1, MYCOL, 0, NPCOL ) + 1
.TP 21
.ti +4
LIIB
= NUMROC( MAXINDEX, 1, MYROW, 0, NPROW ) + 1
.TP 21
.ti +4
NQB
= NQ - LIJB + 1
.TP 21
.ti +4
NPB
= NP - LIIB + 1
.TP 21
.ti +4
INHTB
= INHT + LIJB - 1
.TP 21
.ti +4
INVTB
= INVT + LIJB - 1
.TP 21
.ti +4
INHB
= INH + LIIB - 1
.TP 21
.ti +4
INVB
= INV + LIIB - 1
.TP 21
.ti +4
DO
160 INDEX = MININDEX, MIN( MAXINDEX, N-1 )
.TP 21
.ti +4
BINDEX
= INDEX - MININDEX
.TP 21
.ti +4
CURROW
= NXTROW
.TP 21
.ti +4
CURCOL
= NXTCOL
.TP 21
.ti +4
NXTROW
= MOD( CURROW+1, NPROW )
.TP 21
.ti +4
NXTCOL
= MOD( CURCOL+1, NPCOL )
.TP 21
.ti +4
LII
= LIIP1
.TP 21
.ti +4
LIJ
= LIJP1
.TP 21
.ti +4
NPM0
= NPM1
.TP 21
.ti +4
IF(
MYROW.EQ.CURROW ) THEN
.TP 21
.ti +4
NPM1
= NPM1 - 1
.TP 21
.ti +4
LIIP1
= LIIP1 + 1
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYCOL.EQ.CURCOL ) THEN
.TP 21
.ti +4
NQM1
= NQM1 - 1
.TP 21
.ti +4
LIJP1
= LIJP1 + 1
.TP 21
.ti +4
LTLIP1
= LTLIP1 + 1
.TP 21
.ti +4
LTNM1
= LTNM1 - 1
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYCOL.EQ.CURCOL ) THEN
.TP 21
.ti +4
INDEXA
= LII + ( LIJ-1 )*LDA
.TP 21
.ti +4
INDEXINV
= INV + LII - 1 + ( BINDEX-1 )*LDV
.TP 21
.ti +4
INDEXINH
= INH + LII - 1 + ( BINDEX-1 )*LDV
.TP 21
.ti +4
CONJTOPH
= DCONJG( WORK( INHT+LIJ-1+BINDEX*LDV ) )
.TP 21
.ti +4
CONJTOPV
= DCONJG( TOPNV )
.TP 21
.ti +4
IF(
INDEX.GT.1 ) THEN
.TP 21
.ti +4
DO
30 I = 0, NPM0 - 1
.TP 21
.ti +4
A(
INDEXA+I ) = A( INDEXA+I ) -
WORK( INDEXINV+LDV+I )*CONJTOPH -
WORK( INDEXINH+LDV+I )*CONJTOPV
.TP 21
.ti +4
30
CONTINUE
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYCOL.EQ.CURCOL ) THEN
.TP 21
.ti +4
IF(
MYROW.EQ.CURROW ) THEN
.TP 21
.ti +4
DTMP(
2 ) = DBLE( A( LII+( LIJ-1 )*LDA ) )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
DTMP(
2 ) = ZERO
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYROW.EQ.NXTROW ) THEN
.TP 21
.ti +4
DTMP(
3 ) = DBLE( A( LIIP1+( LIJ-1 )*LDA ) )
.TP 21
.ti +4
DTMP(
4 ) = DIMAG( A( LIIP1+( LIJ-1 )*LDA ) )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
DTMP(
3 ) = ZERO
.TP 21
.ti +4
DTMP(
4 ) = ZERO
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
NORM
= DZNRM2( NPM1, A( LIIP1+( LIJ-1 )*LDA ), 1 )
.TP 21
.ti +4
DTMP(
1 ) = NORM
.TP 21
.ti +4
DTMP(
5 ) = ZERO
.TP 21
.ti +4
IF(
DTMP( 1 ).GE.SAFMAX .OR. DTMP( 1 ).LT.SAFMIN ) THEN
.TP 21
.ti +4
DTMP(
5 ) = ONE
.TP 21
.ti +4
DTMP(
1 ) = ZERO
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DTMP(
1 ) = DTMP( 1 )*DTMP( 1 )
.TP 21
.ti +4
CALL
DGSUM2D( ICTXT, 'C', ' ', 5, 1, DTMP, 5, -1,
CURCOL )
.TP 21
.ti +4
IF(
DTMP( 5 ).EQ.ZERO ) THEN
.TP 21
.ti +4
DTMP(
1 ) = SQRT( DTMP( 1 ) )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
DTMP(
1 ) = NORM
.TP 21
.ti +4
CALL
PDTREECOMB( ICTXT, 'C', 1, DTMP, -1, MYCOL,
DCOMBNRM2 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
NORM
= DTMP( 1 )
.TP 21
.ti +4
D(
LIJ ) = DTMP( 2 )
.TP 21
.ti +4
IF(
MYROW.EQ.CURROW .AND. MYCOL.EQ.CURCOL ) THEN
.TP 21
.ti +4
A(
LII+( LIJ-1 )*LDA ) = DCMPLX( D( LIJ ), ZERO )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
ALPHA
= DCMPLX( DTMP( 3 ), DTMP( 4 ) )
.TP 21
.ti +4
NORM
= SIGN( NORM, DBLE( ALPHA ) )
.TP 21
.ti +4
IF(
NORM.EQ.ZERO ) THEN
.TP 21
.ti +4
TOPTAU
= ZERO
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
BETA
= NORM + ALPHA
.TP 21
.ti +4
TOPTAU
= BETA / NORM
.TP 21
.ti +4
ONEOVERBETA
= 1.0D0 / BETA
.TP 21
.ti +4
CALL
ZSCAL( NPM1, ONEOVERBETA,
A( LIIP1+( LIJ-1 )*LDA ), 1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYROW.EQ.NXTROW ) THEN
.TP 21
.ti +4
A(
LIIP1+( LIJ-1 )*LDA ) = Z_ONE
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
TAU(
LIJ ) = TOPTAU
.TP 21
.ti +4
E(
LIJ ) = -NORM
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
40 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INV+LIIP1-1+BINDEX*LDV+NPM1+I ) = A( LIIP1+I+
( LIJ-1 )*LDA )
.TP 21
.ti +4
40
CONTINUE
.TP 21
.ti +4
IF(
MYCOL.EQ.CURCOL ) THEN
.TP 21
.ti +4
WORK(
INV+LIIP1-1+BINDEX*LDV+NPM1+NPM1 ) = TOPTAU
.TP 21
.ti +4
CALL
ZGEBS2D( ICTXT, 'R', ' ', NPM1+NPM1+1, 1,
WORK( INV+LIIP1-1+BINDEX*LDV ),
NPM1+NPM1+1 )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZGEBR2D( ICTXT, 'R', ' ', NPM1+NPM1+1, 1,
WORK( INV+LIIP1-1+BINDEX*LDV ),
NPM1+NPM1+1, MYROW, CURCOL )
.TP 21
.ti +4
TOPTAU
= WORK( INV+LIIP1-1+BINDEX*LDV+NPM1+NPM1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
50 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INH+LIIP1-1+( BINDEX+1 )*LDV+I ) = WORK( INV+LIIP1-
1+BINDEX*LDV+NPM1+I )
.TP 21
.ti +4
50
CONTINUE
.TP 21
.ti +4
IF(
INDEX.LT.N ) THEN
.TP 21
.ti +4
IF(
MYROW.EQ.NXTROW .AND. MYCOL.EQ.CURCOL )
A( LIIP1+( LIJ-1 )*LDA ) = E( LIJ )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYROW.EQ.MYCOL ) THEN
.TP 21
.ti +4
DO
60 I = 0, NPM1 + NPM1
.TP 21
.ti +4
WORK(
INVT+LIJP1-1+BINDEX*LDV+I ) = WORK( INV+LIIP1-1+
BINDEX*LDV+I )
.TP 21
.ti +4
60
CONTINUE
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZGESD2D( ICTXT, NPM1+NPM1, 1,
WORK( INV+LIIP1-1+BINDEX*LDV ), NPM1+NPM1,
MYCOL, MYROW )
.TP 21
.ti +4
CALL
ZGERV2D( ICTXT, NQM1+NQM1, 1,
WORK( INVT+LIJP1-1+BINDEX*LDV ), NQM1+NQM1,
MYCOL, MYROW )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
70 I = 0, NQM1 - 1
.TP 21
.ti +4
WORK(
INHT+LIJP1-1+( BINDEX+1 )*LDV+I ) = WORK( INVT+
LIJP1-1+BINDEX*LDV+NQM1+I )
.TP 21
.ti +4
70
CONTINUE
.TP 21
.ti +4
IF(
INDEX.GT.1 ) THEN
.TP 21
.ti +4
DO
90 J = LIJP1, LIJB - 1
.TP 21
.ti +4
DO
80 I = 0, NPM1 - 1
.TP 21
.ti +4
A(
LIIP1+I+( J-1 )*LDA ) = A( LIIP1+I+( J-1 )*LDA )
- WORK( INV+LIIP1-1+BINDEX*LDV+I )*
DCONJG( WORK( INHT+J-1+BINDEX*LDV ) ) -
WORK( INH+LIIP1-1+BINDEX*LDV+I )*
DCONJG( WORK( INVT+J-1+BINDEX*LDV ) )
.TP 21
.ti +4
80
CONTINUE
.TP 21
.ti +4
90
CONTINUE
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
WORK(
INV+LIIP1-1+( BINDEX+1 )*LDV ) = Z_ZERO
.TP 21
.ti +4
WORK(
INVT+LIJP1-1+( BINDEX+1 )*LDV+NQM1-1 ) = Z_ZERO
.TP 21
.ti +4
IF(
MYROW.EQ.MYCOL ) THEN
.TP 21
.ti +4
IF(
LTNM1.GT.1 ) THEN
.TP 21
.ti +4
CALL
ZTRMVT( 'L', LTNM1-1,
A( LTLIP1+1+( LIJP1-1 )*LDA ), LDA,
WORK( INVT+LIJP1-1+( BINDEX+1 )*LDV ), 1,
WORK( INH+LTLIP1+1-1+( BINDEX+1 )*LDV ),
1, WORK( INV+LTLIP1+1-1+( BINDEX+1 )*
LDV ), 1, WORK( INHT+LIJP1-1+( BINDEX+
1 )*LDV ), 1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
100 I = 1, LTNM1
.TP 21
.ti +4
WORK(
INVT+LIJP1+I-1-1+( BINDEX+1 )*LDV )
= WORK( INVT+LIJP1+I-1-1+( BINDEX+1 )*LDV ) +
A( LTLIP1+I-1+( LIJP1+I-1-1 )*LDA )*
WORK( INH+LTLIP1+I-1-1+( BINDEX+1 )*LDV )
.TP 21
.ti +4
100
CONTINUE
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
IF(
LTNM1.GT.0 )
CALL ZTRMVT( 'L', LTNM1, A( LTLIP1+( LIJP1-1 )*LDA ),
LDA, WORK( INVT+LIJP1-1+( BINDEX+1 )*
LDV ), 1, WORK( INH+LTLIP1-1+( BINDEX+
1 )*LDV ), 1, WORK( INV+LTLIP1-1+
( BINDEX+1 )*LDV ), 1,
WORK( INHT+LIJP1-1+( BINDEX+1 )*LDV ),
1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
110 I = 1, 2*( BINDEX+1 )
.TP 21
.ti +4
WORK(
INTMP-1+I ) = 0
.TP 21
.ti +4
110
CONTINUE
.TP 21
.ti +4
IF(
BALANCED ) THEN
.TP 21
.ti +4
NPSET
= NPROW
.TP 21
.ti +4
MYSETNUM
= MYROW
.TP 21
.ti +4
ROWSPERPROC
= ICEIL( NQB, NPSET )
.TP 21
.ti +4
MYFIRSTROW
= MIN( NQB+1, 1+ROWSPERPROC*MYSETNUM )
.TP 21
.ti +4
NUMROWS
= MIN( ROWSPERPROC, NQB-MYFIRSTROW+1 )
.TP 21
.ti +4
CALL
ZGEMV( 'C', NUMROWS, BINDEX+1, Z_ONE,
WORK( INHTB+MYFIRSTROW-1 ), LDV,
WORK( INHTB+MYFIRSTROW-1+( BINDEX+1 )*LDV ),
1, Z_ZERO, WORK( INTMP ), 1 )
.TP 21
.ti +4
CALL
ZGEMV( 'C', NUMROWS, BINDEX+1, Z_ONE,
WORK( INVTB+MYFIRSTROW-1 ), LDV,
WORK( INHTB+MYFIRSTROW-1+( BINDEX+1 )*LDV ),
1, Z_ZERO, WORK( INTMP+BINDEX+1 ), 1 )
.TP 21
.ti +4
CALL
ZGSUM2D( ICTXT, 'C', ' ', 2*( BINDEX+1 ), 1,
WORK( INTMP ), 2*( BINDEX+1 ), -1, -1 )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZGEMV( 'C', NQB, BINDEX+1, Z_ONE, WORK( INHTB ),
LDV, WORK( INHTB+( BINDEX+1 )*LDV ), 1,
Z_ZERO, WORK( INTMP ), 1 )
.TP 21
.ti +4
CALL
ZGEMV( 'C', NQB, BINDEX+1, Z_ONE, WORK( INVTB ),
LDV, WORK( INHTB+( BINDEX+1 )*LDV ), 1,
Z_ZERO, WORK( INTMP+BINDEX+1 ), 1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
BALANCED ) THEN
.TP 21
.ti +4
MYSETNUM
= MYCOL
.TP 21
.ti +4
ROWSPERPROC
= ICEIL( NPB, NPSET )
.TP 21
.ti +4
MYFIRSTROW
= MIN( NPB+1, 1+ROWSPERPROC*MYSETNUM )
.TP 21
.ti +4
NUMROWS
= MIN( ROWSPERPROC, NPB-MYFIRSTROW+1 )
.TP 21
.ti +4
CALL
ZGSUM2D( ICTXT, 'R', ' ', 2*( BINDEX+1 ), 1,
WORK( INTMP ), 2*( BINDEX+1 ), -1, -1 )
.TP 21
.ti +4
IF(
INDEX.GT.1. ) THEN
.TP 21
.ti +4
CALL
ZGEMV( 'N', NUMROWS, BINDEX+1, Z_NEGONE,
WORK( INVB+MYFIRSTROW-1 ), LDV,
WORK( INTMP ), 1, Z_ONE,
WORK( INVB+MYFIRSTROW-1+( BINDEX+1 )*
LDV ), 1 )
.TP 21
.ti +4
CALL
ZGEMV( 'N', NUMROWS, BINDEX+1, Z_NEGONE,
WORK( INHB+MYFIRSTROW-1 ), LDV,
WORK( INTMP+BINDEX+1 ), 1, Z_ONE,
WORK( INVB+MYFIRSTROW-1+( BINDEX+1 )*
LDV ), 1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZGEMV( 'N', NPB, BINDEX+1, Z_NEGONE, WORK( INVB ),
LDV, WORK( INTMP ), 1, Z_ONE,
WORK( INVB+( BINDEX+1 )*LDV ), 1 )
.TP 21
.ti +4
CALL
ZGEMV( 'N', NPB, BINDEX+1, Z_NEGONE, WORK( INHB ),
LDV, WORK( INTMP+BINDEX+1 ), 1, Z_ONE,
WORK( INVB+( BINDEX+1 )*LDV ), 1 )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
IF(
MYROW.EQ.MYCOL ) THEN
.TP 21
.ti +4
DO
120 I = 0, NQM1 - 1
.TP 21
.ti +4
WORK(
INTMP+I ) = WORK( INVT+LIJP1-1+( BINDEX+1 )*LDV+
I )
.TP 21
.ti +4
120
CONTINUE
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZGESD2D( ICTXT, NQM1, 1,
WORK( INVT+LIJP1-1+( BINDEX+1 )*LDV ),
NQM1, MYCOL, MYROW )
.TP 21
.ti +4
CALL
ZGERV2D( ICTXT, NPM1, 1, WORK( INTMP ), NPM1, MYCOL,
MYROW )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
130 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INV+LIIP1-1+( BINDEX+1 )*LDV+I ) = WORK( INV+LIIP1-
1+( BINDEX+1 )*LDV+I ) + WORK( INTMP+I )
.TP 21
.ti +4
130
CONTINUE
.TP 21
.ti +4
CALL
ZGSUM2D( ICTXT, 'R', ' ', NPM1, 1,
WORK( INV+LIIP1-1+( BINDEX+1 )*LDV ), NPM1,
MYROW, NXTCOL )
.TP 21
.ti +4
IF(
MYCOL.EQ.NXTCOL ) THEN
.TP 21
.ti +4
CC(
1 ) = Z_ZERO
.TP 21
.ti +4
DO
140 I = 0, NPM1 - 1
.TP 21
.ti +4
CC(
1 ) = CC( 1 ) + DCONJG( WORK( INV+LIIP1-1+
( BINDEX+1 )*LDV+I ) )*
WORK( INH+LIIP1-1+( BINDEX+1 )*LDV+I )
.TP 21
.ti +4
140
CONTINUE
.TP 21
.ti +4
IF(
MYROW.EQ.NXTROW ) THEN
.TP 21
.ti +4
CC(
2 ) = WORK( INV+LIIP1-1+( BINDEX+1 )*LDV )
.TP 21
.ti +4
CC(
3 ) = WORK( INH+LIIP1-1+( BINDEX+1 )*LDV )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CC(
2 ) = Z_ZERO
.TP 21
.ti +4
CC(
3 ) = Z_ZERO
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
CALL
ZGSUM2D( ICTXT, 'C', ' ', 3, 1, CC, 3, -1, NXTCOL )
.TP 21
.ti +4
TOPV
= CC( 2 )
.TP 21
.ti +4
C
= CC( 1 )
.TP 21
.ti +4
TOPH
= CC( 3 )
.TP 21
.ti +4
TOPNV
= TOPTAU*( TOPV-C*DCONJG( TOPTAU ) / 2*TOPH )
.TP 21
.ti +4
DO
150 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INV+LIIP1-1+( BINDEX+1 )*LDV+I ) = TOPTAU*
( WORK( INV+LIIP1-1+( BINDEX+1 )*LDV+I )-C*
DCONJG( TOPTAU ) / 2*WORK( INH+LIIP1-1+( BINDEX+
1 )*LDV+I ) )
.TP 21
.ti +4
150
CONTINUE
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
160
CONTINUE
.TP 21
.ti +4
IF(
MAXINDEX.LT.N ) THEN
.TP 21
.ti +4
DO
170 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INTMP+I ) = WORK( INH+LIIP1-1+ANB*LDV+I )
.TP 21
.ti +4
170
CONTINUE
.TP 21
.ti +4
IF(
.NOT.TWOGEMMS ) THEN
.TP 21
.ti +4
IF(
INTERLEAVE ) THEN
.TP 21
.ti +4
LDZG
= LDV / 2
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
ZLACPY( 'A', LTNM1, ANB, WORK( INHT+LIJP1-1 ),
LDV, WORK( INVT+LIJP1-1+ANB*LDV ), LDV )
.TP 21
.ti +4
CALL
ZLACPY( 'A', LTNM1, ANB, WORK( INV+LTLIP1-1 ),
LDV, WORK( INH+LTLIP1-1+ANB*LDV ), LDV )
.TP 21
.ti +4
LDZG
= LDV
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
NBZG
= ANB*2
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
LDZG
= LDV
.TP 21
.ti +4
NBZG
= ANB
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
DO
180 PBMIN = 1, LTNM1, PNB
.TP 21
.ti +4
PBSIZE
= MIN( PNB, LTNM1-PBMIN+1 )
.TP 21
.ti +4
PBMAX
= MIN( LTNM1, PBMIN+PNB-1 )
.TP 21
.ti +4
CALL
ZGEMM( 'N', 'C', PBSIZE, PBMAX, NBZG, Z_NEGONE,
WORK( INH+LTLIP1-1+PBMIN-1 ), LDZG,
WORK( INVT+LIJP1-1 ), LDZG, Z_ONE,
A( LTLIP1+PBMIN-1+( LIJP1-1 )*LDA ), LDA )
.TP 21
.ti +4
IF(
TWOGEMMS ) THEN
.TP 21
.ti +4
CALL
ZGEMM( 'N', 'C', PBSIZE, PBMAX, ANB, Z_NEGONE,
WORK( INV+LTLIP1-1+PBMIN-1 ), LDZG,
WORK( INHT+LIJP1-1 ), LDZG, Z_ONE,
A( LTLIP1+PBMIN-1+( LIJP1-1 )*LDA ), LDA )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
180
CONTINUE
.TP 21
.ti +4
DO
190 I = 0, NPM1 - 1
.TP 21
.ti +4
WORK(
INV+LIIP1-1+I ) = WORK( INV+LIIP1-1+ANB*LDV+I )
.TP 21
.ti +4
WORK(
INH+LIIP1-1+I ) = WORK( INTMP+I )
.TP 21
.ti +4
190
CONTINUE
.TP 21
.ti +4
DO
200 I = 0, NQM1 - 1
.TP 21
.ti +4
WORK(
INHT+LIJP1-1+I ) = WORK( INHT+LIJP1-1+ANB*LDV+I )
.TP 21
.ti +4
200
CONTINUE
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
210
CONTINUE
.TP 21
.ti +4
IF(
MYCOL.EQ.NXTCOL ) THEN
.TP 21
.ti +4
IF(
MYROW.EQ.NXTROW ) THEN
.TP 21
.ti +4
D(
NQ ) = DBLE( A( NP+( NQ-1 )*LDA ) )
.TP 21
.ti +4
A(
NP+( NQ-1 )*LDA ) = D( NQ )
.TP 21
.ti +4
CALL
DGEBS2D( ICTXT, 'C', ' ', 1, 1, D( NQ ), 1 )
.TP 21
.ti +4
ELSE
.TP 21
.ti +4
CALL
DGEBR2D( ICTXT, 'C', ' ', 1, 1, D( NQ ), 1, NXTROW,
NXTCOL )
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
END
IF
.TP 21
.ti +4
WORK(
1 ) = DCMPLX( LWMIN )
.TP 21
.ti +4
RETURN
.TP 21
.ti +4
END
.SH PURPOSE
